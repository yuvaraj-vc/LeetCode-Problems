LC Number: 1813

QUESTION :

Sentence Similarity III

You are given two strings sentence1 and sentence2, each representing a sentence composed of words. A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of only uppercase and lowercase English characters.
Two sentences s1 and s2 are considered similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. Note that the inserted sentence must be separated from existing words by spaces.
For example,
s1 = "Hello Jane" and s2 = "Hello my name is Jane" can be made equal by inserting "my name is" between "Hello" and "Jane" in s1.
s1 = "Frog cool" and s2 = "Frogs are cool" are not similar, since although there is a sentence "s are" inserted into s1, it is not separated from "Frog" by a space.
Given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.

 
Example 1:
Input: sentence1 = "My name is Haley", sentence2 = "My Haley"
Output: true

Explanation:
sentence2 can be turned to sentence1 by inserting "name is" between "My" and "Haley".

Example 2:
Input: sentence1 = "of", sentence2 = "A lot of words"
Output: false

Explanation:
No single sentence can be inserted inside one of the sentences to make it equal to the other.

Example 3:
Input: sentence1 = "Eating right now", sentence2 = "Eating"
Output: true

Explanation:
sentence2 can be turned to sentence1 by inserting "right now" at the end of the sentence.

APPROACH :

1.Handling Sentence Lengths:
We first split both sentences into arrays of words using spaces.
Since one sentence could be shorter than the other, we ensure that sentence1 is the longer or equal in length to sentence2. If sentence2 is longer, we swap the two sentences to maintain this invariant.

2.Matching Common Prefix:
We try to match the sentences from the beginning (prefix). Starting from the first word of both sentences, we increment the start pointer until the words no longer match or we exhaust sentence2.

3.Matching Common Suffix:
Similarly, we match the sentences from the end (suffix). Using the end pointer, we start from the last word of both sentences and move backwards until the words no longer match or we exhaust sentence2.

4.Checking Valid Insertion:
After finding the matching prefix and suffix, we check if the number of matched words (prefix + suffix) is at least the total length of sentence2. This means that the middle part of the longer sentence can be ignored, and an insertion of a sentence can make the two sentences identical.

5.Final Decision:
If the total number of matching words is greater than or equal to the length of sentence2, the sentences are similar, and we return true. Otherwise, they are not similar, and we return false.

SOLUTION:

class Solution {

   
    private String[] splitWords(String sentence) {
        return sentence.split(" ");
    }

    public boolean areSentencesSimilar(String sentence1, String sentence2) {
       
        String[] words1 = splitWords(sentence1);
        String[] words2 = splitWords(sentence2);

        
        if (words1.length < words2.length) {
            String[] temp = words1;
            words1 = words2;
            words2 = temp;
        }

        int start = 0, end = 0;
        int n1 = words1.length, n2 = words2.length;

        
        while (start < n2 && words1[start].equals(words2[start])) {
            start++;
        }

       
        while (end < n2 && words1[n1 - end - 1].equals(words2[n2 - end - 1])) {
            end++;
        }

        
        return start + end >= n2;
    }
}

 
